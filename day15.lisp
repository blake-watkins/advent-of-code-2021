(in-package :aoc-2021)

(defun parse-file ()
  (parse-lines (parse-list (parse-digit) "")))

(defun neighbours (p max)
  (remove-if-not
   (lambda (neighbour)
     (every (lambda (c m) (<= 0 c (1- m))) neighbour max))
   (mapcar (lambda (d) (map 'list #'+ d p))
	   '((1 0) (0 1) (-1 0) (0 -1)))))

(defun risk (cur map)
  (multiple-value-bind (rq rr) (floor (first cur) (length map))
    (multiple-value-bind (cq cr) (floor (second cur) (length (first map)))
      (let ((base-risk (elt (elt map rr) cr)))
	(1+ (mod (+ (1- base-risk) rq cq) 9))))))

(defun day15 (input &key (part 2))
  (let* ((map (run-parser (parse-file) input))
         (ret (fset:empty-map))
	 (dim (list (length map) (length (first map)))))
    (when (= part 2)
      (setf dim (mapcar (lambda (x) (* 5 x)) dim)))
    (dijkstra '(0 0)
              (lambda (vertex parent distance)
		(declare (ignore parent))
                (fset:includef ret vertex distance))
              (lambda (v)
                (mapcar (lambda (n) (list n (risk n map)))
                        (neighbours v dim))))
    (fset:lookup ret (mapcar #'1- dim))))
