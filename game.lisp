(in-package :aoc-2021)

;;; Game a s :: s -> ((a, s) -> r) -> r
;;; Combination of continuation and state monads

;;; A game monad takes a state (s) and a continuation ((a, s) -> r). It performs
;;; a computation with result type a and then calls its continuation with the
;;; result and the (possibly changed) state.

(defun game-unit (a)
  (lambda (s k)
    (funcall k (list a s))))

(defun game-bind (ma f)
  (lambda (s k)
    (funcall ma s (lambda (as)
		    (destructuring-bind (a s-dash) as
		      (let ((mb (funcall f a)))
			(funcall mb s-dash (lambda (bs)
					     (funcall k bs)))))))))

;; *CONT-STACK* contains the call stack of continuations generated by AMB
(defparameter *cont-stack* nil)

(defmacro run-game (m s &optional (k '#'(lambda (x) x)))
  "Run game M with initial state S. K is called on failure of amb handling."
  `(let ((aoc:*bind-function* 'game-bind)
         (aoc:*unit-function* 'game-unit))
     (funcall (with-monad
		(call/cc
		 (lambda (k)
		   (setf *cont-stack* (list k))
		   ,m)))
	      ,s ,k)))

;;; Primitive functions

(defun get-state ()
  (lambda (s k)
    (funcall k (list s s))))

(defun set-state (new-state)
  (lambda (s k)
    (declare (ignore s))
    (funcall k (list nil new-state))))

(defun call/cc (f)
  (lambda (s k)
    (funcall
     (funcall f
	      (lambda (a)
		(lambda (s2 bk)
		  (declare (ignore bk))
		  (declare (ignore s2))
		  (funcall k (list a s)))))
     s k)))

;;; AMB operator
;;;  https://mitpress.mit.edu/sites/default/files/sicp/full-text/sicp/book/node88.html

(defun amb (l)
  "Return first item of list that subsequent code won't call (AMB-FAIL) on. "
  (with-monad
    (call/cc (lambda (k)
	       (push k *cont-stack*)
	       (unit nil)))
    (if (null l)
        (progn
          (pop *cont-stack*)
          (amb-fail))
        (let ((ret (car l)))
          (setf l (cdr l))
          (unit ret)))))

(defun amb-fail ()
  "Backtrack to most recently bound amb and try then next value."
  (with-monad
    (funcall (car *cont-stack*) nil)))

(defun guard (condition)
  "Ensure that condition is true. If not AMB-FAIL is called to backtrack. "
  (if condition
      (unit nil)
      (amb-fail)))





